services:
  # (~) Frontend - always runs
  frontend:
    container_name: frontend
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: ${FRONTEND_TARGET:-dev}
    env_file: .env
    expose:
      - '3000'
    volumes:
      - ./frontend:/app
      - /app/node_modules
    networks:
      - internal-net

  # (~) Database
  database:
    image: postgres:17-alpine
    environment:
      POSTGRES_DB: ${DB_NAME:-appdb}
      POSTGRES_USER: ${DB_USER:-appuser}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-apppass}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./infrastructure/database/init.sql:/docker-entrypoint-initdb.d/init.sql
      - ./logs/postgres:/var/log/postgresql
    networks:
      - internal-net

  # (~) API servers (selected via profile)
  api-php:
    profiles: ["php"]
    build:
      context: ./backends/php
      dockerfile: api/Dockerfile
    container_name: api
    env_file: .env
    environment:
      DB_HOST: database
      NODE_ENV: ${NODE_ENV:-development}
    expose:
      - "8000"
    ports:
      - "8000:8000"
    volumes:
      - ./backends/php/api:/var/www/api
      - ./backends/php/shared:/var/www/shared
      - ./logs/php:/var/log/php
    depends_on:
      - database
    networks:
      - internal-net

  api-python:
    profiles: ["python"]
    build:
      context: ./backends/python
      dockerfile: api/Dockerfile
    container_name: api
    environment:
      - DB_HOST=database
    ports:
      - "8000:8000"
    volumes:
      - ./backends/python/api:var/www/api
      - ./backends/python/shared:/var/www/shared
      - ./logs/python:/var/log/python
    depends_on:
      - database
    networks:
      - internal-net

  api-node:
    profiles: ["node"]
    build:
      context: ./backends/node
      dockerfile: api/Dockerfile
    container_name: api
    environment:
      - DB_HOST=database
      - NODE_ENV=${NODE_ENV:-development}
    ports:
      - "8000:8000"
    volumes:
      - ./backends/node/api:/var/www/api
      - ./backends/node/shared:/var/www/shared
      - ./logs/node:/var/log/node
    depends_on:
      - database
    networks:
      - internal-net

  cloudpub:
    container_name: cloudpub
    image: cloudpub/cloudpub:latest
    restart: unless-stopped
    environment:
      - TOKEN=${CLOUDPUB_TOKEN:-your_cloudpub_token_here}
      - HTTP=frontend:3000,api-php:8000
    command: run
    depends_on:
      - frontend
      - api-php
    volumes:
      - cloudpub-config:/home/cloudpub
    networks:
      - internal-net

networks:
  internal-net:
    driver: bridge

volumes:
  postgres_data:
  cloudpub-config:
